name: Website Deployment

env:
  DEPLOY_PACKAGE_NAME_FILE: 'production.zip'
  DEPLOY_PACKAGE_NAME: '${{ github.sha }}'

on:
  push:
    branches: [main]
  workflow_dispatch:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Git clone https://github.com/DaniilsFirgers/personal_website.git
        uses: actions/checkout@v2

      - name: Install And Build Web app
        run: npm install && npm run build

      - name: Get Package Version
        id: package-version
        run: |
          VERSION=$(grep -o '"version": *"[^"]*"' package.json | awk -F'"' '{print $4}')
          echo "::set-output name=version::$VERSION"

      - name: Print Package Version
        run: echo "Package version is ${{ steps.package-version.outputs.version }}"

      - name: Create zip deployment package
        run: zip -r ${{ env.DEPLOY_PACKAGE_NAME_FILE }} ./build/ -x *.git*

      - name: Copy zip to ligthsail server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PW_LIGHTSAIL_IP }}
          username: ${{ secrets.PW_LIGHTSAIL_USERNAME }}
          key: ${{ secrets.SSH_PW_PRIVATE_KEY }}
          password: ''
          passphrase: ''
          port: 22
          source: ${{ env.DEPLOY_PACKAGE_NAME_FILE }}
          target: '/home/${{ secrets.PW_LIGHTSAIL_USERNAME }}'

      - name: Connect to AWS Lightsail, extract zip and run start-server.sh script
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.PW_LIGHTSAIL_IP }}
          username: ${{ secrets.PW_LIGHTSAIL_USERNAME }}
          key: ${{ secrets.SSH_PW_PRIVATE_KEY }}
          password: ''
          passphrase: ''
          port: 22
          script: |
            unzip -q -o /home/${{ secrets.PW_LIGHTSAIL_USERNAME  }}/${{ env.DEPLOY_PACKAGE_NAME_FILE }} -d .
            /home/${{ secrets.PW_LIGHTSAIL_USERNAME }}/start-server.sh

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.package-version.outputs.version }}
          release_name: Release v${{ steps.package-version.outputs.version }}
          body: Release for version ${{ steps.package-version.outputs.version }} for commit ${{ github.sha }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.DEPLOY_PACKAGE_NAME_FILE }}
          asset_name: production.zip
          asset_content_type: application/zip
